{"version":3,"file":"static/js/942.1579ff80.chunk.js","mappings":"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","sources":["components/Covid/utils/constants.js","components/Covid/api/getFetch.js","components/Covid/components/UI/Select/Select.jsx","components/Covid/components/CountriesList/components/CountriesSelection.jsx","components/Covid/components/UI/Button/Button.jsx","components/Covid/components/UI/Card/Card.jsx","components/Covid/components/UI/Error/Error.jsx","components/Covid/components/UI/Input/Input.jsx","components/Covid/components/UI/Loader/Loader.jsx","components/Covid/components/CountriesList/CountriesList.jsx","components/Covid/components/CountryInfo/CountryInfo.jsx","components/Covid/components/Statistics/Statistics.jsx","components/Covid/components/InputMenu/InputMenu.jsx","components/Covid/utils/handleDate.js","components/Covid/components/Covid.js"],"sourcesContent":["export const BASE_API_URL = \"https://api.covid19api.com/\";\r\n\r\nexport const INIT_PERIOD = {\r\n  start_period: 0,\r\n  end_period: 0,\r\n};\r\nexport const DAY = {\r\n  start_period: 1,\r\n  end_period: 2,\r\n};\r\nexport const WEEK = {\r\n  start_period: 1,\r\n  end_period: 8,\r\n};\r\nexport const MONTH = {\r\n  start_period: 1,\r\n  end_period: 31,\r\n};\r\n\r\nexport const INIT_RESULTS = {\r\n  warning_start: \"\",\r\n  warning_end: \"\",\r\n  period_start: 0,\r\n  period_end: 0,\r\n};\r\n","import { BASE_API_URL } from \"../utils/constants\";\r\n\r\nconst getFetch = async (url) => {\r\n  if (!url) throw new Error(\"Please add url to request\");\r\n  const response = await fetch(BASE_API_URL + url);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Response status fetch is : ${response.status}`);\r\n  } else {\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n};\r\n\r\nexport default getFetch;\r\n","import React from \"react\";\r\nimport \"./Select.scss\";\r\n\r\nconst Select = ({ children, handleOnChange }) => {\r\n  return (\r\n    <select\r\n      name='countries'\r\n      id='countriesList'\r\n      autoFocus\r\n      defaultValue='default'\r\n      className='countriesList'\r\n      aria-label='Default select example'\r\n      onChange={(e) => handleOnChange(e.target.value)}\r\n    >\r\n      <option value='default' disabled hidden>\r\n        Choose a country:\r\n      </option>\r\n      {children}\r\n    </select>\r\n  );\r\n};\r\nexport default Select;\r\n","import React from \"react\";\r\nimport Select from \"../../UI/Select/Select\";\r\n\r\nconst CountriesSelection = ({ data, setCountry }) => {\r\n  return (\r\n    <>\r\n      <Select handleOnChange={setCountry}>\r\n        {data.map((item, index) => (\r\n          <option key={item.Slug} value={item.Slug}>\r\n            {index + 1}. {item.Country}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountriesSelection;\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button = ({ callback, label }) => {\r\n  return (\r\n    <button\r\n      className='button'\r\n      onClick={() => {\r\n        if (!callback) return;\r\n        callback();\r\n      }}\r\n    >\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","const Card = ({\r\n  name,\r\n  date,\r\n  maxPeriod,\r\n  period,\r\n  active,\r\n  confirmed,\r\n  deaths,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h2>Country: {name}</h2>\r\n      {!!date && <p>Last statistics day: {date}</p>}\r\n      {!!maxPeriod && (\r\n        <p>All statistical period : {maxPeriod}</p>\r\n      )}\r\n      {!!period && <p>Statistical period : {period}</p>}\r\n      <p>Amount of active : {active}</p>\r\n      <p>Amount confirmed : {confirmed}</p>\r\n      <p>Amount of deaths : {deaths}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Error.scss\";\r\n\r\nconst Error = ({ label }) => {\r\n  return <h2 className={\"warning\"}>{label}</h2>;\r\n};\r\n\r\nexport default Error;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst Input = ({ label, memoCallback }) => {\r\n  const [val, setVal] = useState(\"\");\r\n  console.log(\"val in Input ->\", val);\r\n\r\n  useEffect(() => {\r\n    memoCallback(val, label);\r\n  }, [memoCallback, val, label]);\r\n  return (\r\n    <input\r\n      id={label}\r\n      value={val}\r\n      type='date'\r\n      onChange={(e) => {\r\n        setVal(e.currentTarget.value);\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default Input;\r\n","const Loader = () => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center\" style={{ width: '100%', marginTop: '50px' }}>\r\n      <div className=\"spinner-border\" role=\"status\"></div>\r\n      <span >Loading...</span>\r\n    </div>\r\n  )\r\n}\r\nexport default Loader;","import React, { useState, useEffect } from \"react\";\r\nimport getFetch from \"../../api/getFetch\";\r\nimport CountriesSelection from \"./components/CountriesSelection\";\r\nimport { Loader } from '../UI'\r\n\r\nconst CountriesList = ({ setCountry }) => {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const countries = await getFetch(\"countries\");\r\n      setItems(countries);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n\r\n    !items.length ? <Loader /> :\r\n    <header>\r\n      <nav>\r\n        <form id=\"form\">\r\n          <label form=\"countriesList\"></label>\r\n          <CountriesSelection data={items} setCountry={setCountry} />\r\n        </form>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default CountriesList;\r\n","import { useEffect, useState } from \"react\";\r\nimport getFetch from \"../../api/getFetch\";\r\nimport { Button, Card, Loader, Error } from \"../UI\";\r\nimport { DAY, WEEK, MONTH } from \"../../utils/constants\";\r\nimport \"./CountryInfo.scss\";\r\n\r\nconst CountryInfo = ({\r\n  country,\r\n  countryData,\r\n  setCountryData,\r\n  setPeriod,\r\n  setShowInputMenu,\r\n  setShowStatistics,\r\n}) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const request = await getFetch(`country/${country}`);\r\n      setCountryData(request);\r\n      setLoading(false);\r\n    };\r\n    if (!country.length) return;\r\n    setLoading(true);\r\n    fetchData();\r\n  }, [country, setCountryData, setLoading]);\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n  if (!countryData.length)\r\n    return (\r\n      <Error\r\n        label={\"No information about covid in this country\"}\r\n      />\r\n    );\r\n  const lastData = countryData[countryData.length - 1];\r\n  const name = lastData.Country;\r\n  const date = lastData.Date.slice(0, 10);\r\n  const maxPeriodDays = countryData.length;\r\n  const active = lastData.Active;\r\n  const confirmed = lastData.Confirmed;\r\n  const deaths = lastData.Deaths;\r\n\r\n  const setStandardPeriod = (period) => {\r\n    setPeriod(period);\r\n    setShowStatistics(true);\r\n  };\r\n  return (\r\n    <div className='countryInfo'>\r\n      <Card\r\n        name={name}\r\n        date={date}\r\n        maxPeriod={maxPeriodDays}\r\n        active={active}\r\n        confirmed={confirmed}\r\n        deaths={deaths}\r\n      />\r\n      <a href='#statisticsInfo'>\r\n        <Button\r\n          callback={() => setStandardPeriod(DAY)}\r\n          label={\"For last day\"}\r\n        />\r\n        <Button\r\n          callback={() => setStandardPeriod(WEEK)}\r\n          label={\"For last week\"}\r\n        />\r\n        <Button\r\n          callback={() => setStandardPeriod(MONTH)}\r\n          label={\"For last month\"}\r\n        />\r\n      </a>\r\n      <a href='#inputMenu'>\r\n        <Button\r\n          callback={() => setShowInputMenu(true)}\r\n          label={\"Input your period\"}\r\n        />\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n","import React from \"react\";\r\nimport { Card } from \"../UI\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport \"./Statistics.scss\";\r\n\r\nconst Statistics = ({\r\n  period,\r\n  countryData,\r\n  setShowStatistics,\r\n}) => {\r\n  const { start_period, end_period } = period;\r\n\r\n  if (countryData.length) {\r\n    const calculate = (keyWord) => {\r\n      return Math.abs(\r\n        countryData[countryData.length - start_period - 1][\r\n          keyWord\r\n        ] -\r\n          countryData[countryData.length - end_period - 1][\r\n            keyWord\r\n          ]\r\n      );\r\n    };\r\n\r\n    const name = countryData[0].Country;\r\n    const periodDays = Math.abs(start_period - end_period);\r\n    const active = calculate(\"Active\");\r\n    const confirmed = calculate(\"Confirmed\");\r\n    const deaths = calculate(\"Deaths\");\r\n\r\n    return (\r\n      <div className='statisticsInfo' id='statisticsInfo'>\r\n        <Card\r\n          name={name}\r\n          period={periodDays}\r\n          active={active}\r\n          confirmed={confirmed}\r\n          deaths={deaths}\r\n        />\r\n        <Button\r\n          callback={() => setShowStatistics(false)}\r\n          label={\"Hidden Statistics\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default Statistics;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { Button, Error, Input } from \"../UI\";\r\nimport handleDate from \"../../utils/handleDate\";\r\nimport { INIT_RESULTS } from \"../../utils/constants\";\r\n\r\nimport \"./InputMenu.scss\";\r\n\r\nconst InputMenu = ({\r\n  maxPeriod,\r\n  setPeriod,\r\n  setShowInputMenu,\r\n  setShowStatistics,\r\n}) => {\r\n  const [results, setResults] = useState(INIT_RESULTS);\r\n  console.log(\"results\", results);\r\n\r\n  const memoCallback = useCallback(\r\n    (inputVal, label) => {\r\n      setResults((prev) => {\r\n        return {\r\n          ...prev,\r\n          ...handleDate(inputVal, label, maxPeriod),\r\n        };\r\n      });\r\n    },\r\n    [maxPeriod, setResults]\r\n  );\r\n  useEffect(() => {\r\n    if (results.period_start && results.period_end) {\r\n      setPeriod({\r\n        start_period: results.period_start,\r\n        end_period: results.period_end,\r\n      });\r\n      setShowStatistics(true);\r\n    } else {\r\n      setShowStatistics(false);\r\n    }\r\n  }, [\r\n    results.period_start,\r\n    results.period_end,\r\n    setPeriod,\r\n    setShowStatistics,\r\n  ]);\r\n\r\n  return (\r\n    <div className='inputMenu' id='inputMenu'>\r\n      <h4>\r\n        Period must be limited no more {maxPeriod} days ago\r\n        to last statistics day.\r\n      </h4>\r\n      <label name='start_period'>Enter periods start</label>\r\n      <Input label={\"start\"} memoCallback={memoCallback} />\r\n\r\n      <label name='end_period'>Enter periods end</label>\r\n      <Input label={\"end\"} memoCallback={memoCallback} />\r\n      <Button\r\n        label={\"Hidden input menu\"}\r\n        callback={() => setShowInputMenu(false)}\r\n      />\r\n      {!!results.warning_start ? (\r\n        <Error label={results.warning_start} />\r\n      ) : null}\r\n      {!!results.warning_end ? (\r\n        <Error label={results.warning_end} />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\nexport default InputMenu;\r\n","export default function handleDate(\r\n  inpVal,\r\n  label,\r\n  maxPeriod\r\n) {\r\n  const results = {};\r\n  //count days\r\n  const today = new Date(); //ms\r\n  const days = new Date(inpVal); //choose date ms\r\n  const resDays = Math.ceil((today - days) / 86400000);\r\n\r\n  //write results if error ...\r\n  if (resDays < 1 || resDays > maxPeriod) {\r\n    results[\"warning_\" + label] = `Wrong period ${label}.`;\r\n    results[\"period_\" + label] = 0;\r\n  } else {\r\n    results[\"warning_\" + label] = \"\";\r\n    results[\"period_\" + label] = resDays;\r\n  }\r\n  return results;\r\n}\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CountriesList from \"./CountriesList/CountriesList\";\r\nimport CountryInfo from \"./CountryInfo/CountryInfo\";\r\nimport Statistics from \"./Statistics/Statistics\";\r\nimport InputMenu from \"./InputMenu/InputMenu\";\r\nimport { INIT_PERIOD } from \"../utils/constants\";\r\n\r\nimport \"./Covid.scss\";\r\n\r\nconst Covid = () => {\r\n  const [country, setCountry] = useState(\"\");\r\n  const [countryData, setCountryData] = useState([]);\r\n  const [period, setPeriod] = useState(INIT_PERIOD);\r\n  console.log(\"period\", period);\r\n\r\n  const [showInputMenu, setShowInputMenu] = useState(false);\r\n  const [showStatistics, setShowStatistics] =\r\n    useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Link to='/portfolio'>{\"<-- BACK\"}</Link>\r\n      <CountriesList setCountry={setCountry} />\r\n      <main className='content'>\r\n        {showInputMenu && (\r\n          <InputMenu\r\n            maxPeriod={countryData.length}\r\n            setPeriod={setPeriod}\r\n            setShowInputMenu={setShowInputMenu}\r\n            setShowStatistics={setShowStatistics}\r\n          />\r\n        )}\r\n        {!!country.length && (\r\n          <CountryInfo\r\n            country={country}\r\n            countryData={countryData}\r\n            setCountryData={setCountryData}\r\n            setPeriod={setPeriod}\r\n            setShowInputMenu={setShowInputMenu}\r\n            setShowStatistics={setShowStatistics}\r\n          />\r\n        )}\r\n        {showStatistics && (\r\n          <Statistics\r\n            period={period}\r\n            countryData={countryData}\r\n            setShowStatistics={setShowStatistics}\r\n          />\r\n        )}\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Covid;\r\n"],"names":["INIT_PERIOD","start_period","end_period","DAY","WEEK","MONTH","INIT_RESULTS","warning_start","warning_end","period_start","period_end","getFetch","url","Error","fetch","response","ok","status","json","result","children","handleOnChange","name","id","autoFocus","defaultValue","className","onChange","e","target","value","disabled","hidden","data","setCountry","map","item","index","Slug","Country","callback","label","onClick","date","maxPeriod","period","active","confirmed","deaths","memoCallback","useState","val","setVal","console","log","useEffect","type","currentTarget","style","width","marginTop","role","items","setItems","fetchData","countries","length","form","country","countryData","setCountryData","setPeriod","setShowInputMenu","setShowStatistics","loading","setLoading","request","lastData","Date","slice","maxPeriodDays","Active","Confirmed","Deaths","setStandardPeriod","href","calculate","keyWord","Math","abs","periodDays","results","setResults","useCallback","inputVal","prev","inpVal","today","days","resDays","ceil","handleDate","showInputMenu","showStatistics","to"],"sourceRoot":""}