{"version":3,"file":"static/js/372.f1779726.chunk.js","mappings":"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","sources":["components/SimpleCalc/ui/Input/Input.tsx","components/SimpleCalc/ui/Results/Results.tsx","components/SimpleCalc/constants/constants.ts","store/selectors/simpleCalcSelector.ts","components/SimpleCalc/ui/Select/Select.tsx","components/SimpleCalc/ui/Warning/Warning.tsx","components/SimpleCalc/ui/Button/Button.tsx","components/SimpleCalc/components/Buttons/Buttons.tsx","components/SimpleCalc/components/SimpleCalc.tsx","ui/Back/Back.tsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\r\nimport { setX } from \"../../../../store/actions/SIMPLE_CALC_ACTIONS\";\r\n\r\ninterface InputPropsType {\r\n  labelText: string;\r\n  id: string;\r\n  val: string;\r\n  setVal: typeof setX;\r\n}\r\n\r\nexport const Input = ({\r\n  labelText,\r\n  id,\r\n  val,\r\n  setVal,\r\n}: InputPropsType) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className='simpleCalc__input'>\r\n      <label htmlFor={id}>{labelText}</label>\r\n      <input\r\n        step={\"any\"}\r\n        id={id}\r\n        type={\"number\"}\r\n        value={Number(val)}\r\n        onChange={(e) => {\r\n          const value = e.currentTarget.value;\r\n          value && dispatch(setVal(value));\r\n        }}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n","interface ResultsProps {\r\n  result: string | number;\r\n  styles: string;\r\n}\r\nexport const Results = ({\r\n  result,\r\n  styles,\r\n}: ResultsProps) => {\r\n  return (\r\n    <div className={styles}>\r\n      <h4>Rounded result: </h4>\r\n      <p>{result}</p>\r\n    </div>\r\n  );\r\n};\r\n","export const ALL_OPERATORS = [\r\n  \"Operation\",\r\n  \"C\",\r\n  \"=\",\r\n  \"+\",\r\n  \"-\",\r\n  \"*\",\r\n  \"/\",\r\n  \"^\",\r\n  \".\",\r\n];\r\nconst BUTTONS = [\r\n  \".\",\r\n  \"0\",\r\n  \"=\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n];\r\n\r\nconst putOnRows = (arr: string[]) => {\r\n  const auxiliary = [];\r\n  while (arr.length) {\r\n    auxiliary.push(arr.splice(0, 3));\r\n  }\r\n  return auxiliary\r\n    .reverse()\r\n    .reduce((ak, el) => [...ak, ...el]);\r\n};\r\nexport const SORTED_BUTTONS = putOnRows(BUTTONS);\r\n","import { createSelector } from \"reselect\";\r\nimport { StateType } from \"../reducer\";\r\n\r\nconst getStore = (state: StateType) =>\r\n  state.simpleCalcReducer.mathReducer;\r\n\r\nexport const getStoreSelector = createSelector(\r\n  getStore,\r\n  (u) => u\r\n); //  - создает мемоизированый селектор\r\n","import { ALL_OPERATORS } from \"../../constants/constants\";\r\nimport { setOperator } from \"../../../../store/actions/SIMPLE_CALC_ACTIONS\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getStoreSelector } from \"../../../../store/selectors/simpleCalcSelector\";\r\n\r\nexport const Select = () => {\r\n  const dispatch = useDispatch();\r\n  const { operator } = useSelector(getStoreSelector);\r\n  return (\r\n    <>\r\n      <label htmlFor={\"simpleCalc_selector\"}>\r\n        \"Please, select the operation:\"\r\n      </label>\r\n      <select\r\n        className='simpleCalc__selector'\r\n        id={\"simpleCalc_selector\"}\r\n        value={operator}\r\n        onChange={(e) =>\r\n          dispatch(setOperator(e.currentTarget.value))\r\n        }\r\n      >\r\n        {/* <option disabled={false} value='Operation'>\r\n          Operation\r\n        </option> */}\r\n        {ALL_OPERATORS.map((operator, i) => (\r\n          <option key={operator + i} value={operator}>\r\n            {operator}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </>\r\n  );\r\n};\r\n","export const Warning = ({\r\n  styles,\r\n  message,\r\n}: {\r\n  styles: string;\r\n  message: string;\r\n}) => {\r\n  return <p className={styles}>{message}</p>;\r\n};\r\n","import { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addToNumber } from \"../../../../store/actions/SIMPLE_CALC_ACTIONS\";\r\n\r\ninterface PropsType {\r\n  name: string;\r\n  i: number;\r\n}\r\n\r\nexport const Button: FC<PropsType> = ({ name, i }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div\r\n      onClick={() => dispatch(addToNumber(name))}\r\n      className='simpleCalc__button'\r\n    >\r\n      {name}\r\n    </div>\r\n  );\r\n};\r\n","import { Button } from \"../../ui\";\r\nimport { SORTED_BUTTONS } from \"../../constants/constants\";\r\n\r\nconst Buttons = () => {\r\n  return (\r\n    <div className='simpleCalc__buttons'>\r\n      {SORTED_BUTTONS.reverse().map((btnName, i) => (\r\n        <Button key={i + btnName} name={btnName} i={i} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default Buttons;\r\n","import { Input, Select, Results, Warning } from \"../ui\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getStoreSelector } from \"../../../store/selectors/simpleCalcSelector\";\r\nimport {\r\n  setX,\r\n  setY,\r\n  calculate,\r\n} from \"../../../store/actions/SIMPLE_CALC_ACTIONS\";\r\nimport Buttons from \"./Buttons/Buttons\";\r\nimport { Back } from \"../../../ui\";\r\nimport \"./SimpleCalc.scss\";\r\n\r\nexport const SimpleCalc = () => {\r\n  const dispatch = useDispatch();\r\n  const { x, y, result, error } = useSelector(\r\n    getStoreSelector\r\n  );\r\n  return (\r\n    <>\r\n      <Back />\r\n      <div className='wrap__simpleCalc'>\r\n        <div className='simpleCalc'>\r\n          <div\r\n            className='simpleCalc__screen'\r\n            style={\r\n              error || result !== \"\"\r\n                ? { visibility: \"visible\" }\r\n                : { visibility: \"hidden\" }\r\n            }\r\n          >\r\n            {error ? (\r\n              <Warning\r\n                message={error}\r\n                styles={\"simpleCalc__warning\"}\r\n              />\r\n            ) : (\r\n              <Results\r\n                result={result}\r\n                styles={\"simpleCalc__results\"}\r\n              />\r\n            )}\r\n          </div>\r\n          <Select />\r\n\r\n          <form\r\n            className={\"simpleCalc__form\"}\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              dispatch(calculate());\r\n            }}\r\n          >\r\n            <Input\r\n              labelText={\"Input first number\"}\r\n              id={\"input_1\"}\r\n              val={x}\r\n              setVal={setX}\r\n            />\r\n            <Input\r\n              labelText={\"Input second number\"}\r\n              id={\"input_2\"}\r\n              val={y}\r\n              setVal={setY}\r\n            />\r\n            <input\r\n              type={\"submit\"}\r\n              value={\"Calculate\"}\r\n              className={\r\n                \"simpleCalc__button simpleCalc__button-calculate\"\r\n              }\r\n            />\r\n          </form>\r\n          <Buttons />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport const Back = () => {\r\n  return (\r\n    <Link to='/portfolio'>\r\n      <Button\r\n        variant={\"secondary\"}\r\n        style={{\r\n          boxShadow: \"10px 10px 10px rgb(100, 100, 100)\",\r\n        }}\r\n      >\r\n        Back\r\n      </Button>\r\n    </Link>\r\n  );\r\n};\r\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function () {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};"],"names":["Input","labelText","id","val","setVal","dispatch","useDispatch","className","htmlFor","step","type","value","Number","onChange","e","currentTarget","Results","result","styles","ALL_OPERATORS","SORTED_BUTTONS","arr","auxiliary","length","push","splice","reverse","reduce","ak","el","putOnRows","getStoreSelector","createSelector","state","simpleCalcReducer","mathReducer","u","Select","operator","useSelector","setOperator","map","i","Warning","message","Button","name","onClick","addToNumber","btnName","SimpleCalc","x","y","error","style","visibility","onSubmit","preventDefault","calculate","setX","setY","Back","to","variant","boxShadow","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","Object","assign","lastResult","recomputations","resetRecomputations"],"sourceRoot":""}