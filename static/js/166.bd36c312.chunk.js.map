{"version":3,"file":"static/js/166.bd36c312.chunk.js","mappings":"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","sources":["store/selectors/dragCardsSelectors.ts","components/DragCards/components/Card/Card.tsx","components/DragCards/components/Card/utils/changeCardStyles.ts","components/DragCards/components/CardDeck/CardDeck.tsx","components/DragCards/components/NavBar/NavBar.tsx","components/DragCards/ui/DragCardsHeader.tsx","components/DragCards/DragCards.tsx"],"sourcesContent":["import { createSelector } from \"reselect\";\r\nimport { StateType } from \"../reducer\";\r\n\r\nconst getUsers = (state: StateType) => state.dragCardsReducer.userReducer;\r\nconst getLoader = (state: StateType) =>\r\n  state.dragCardsReducer.loadReducer.loader;\r\nconst getError = (state: StateType) =>\r\n  state.dragCardsReducer.loadReducer.error;\r\nconst getCurrentDraggingUser = (state: StateType) =>\r\n  state.dragCardsReducer.druggingUserReducer;\r\nconst getFlipThrough = (state: StateType) =>\r\n  state.dragCardsReducer.flipThroughReducer;\r\n\r\nexport const getUsersSelector = createSelector(\r\n  getUsers,\r\n  (u) => u\r\n); //  - создает мемоизированый селектор\r\n\r\nexport const getLoaderSelector = createSelector(\r\n  getLoader,\r\n  (l) => l\r\n);\r\nexport const getErrorSelector = createSelector(\r\n  getError,\r\n  (e) => e\r\n);\r\nexport const getCurrentDraggingUserSelector =\r\n  createSelector(getCurrentDraggingUser, (c) => c);\r\n\r\nexport const getFlipThroughSelector = createSelector(\r\n  getFlipThrough,\r\n  (url) => url\r\n);\r\n","import { FC } from \"react\";\r\nimport { UserType } from \"../../../../store/types/dragCardsType\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setCurrentDruggingUser } from \"../../../../store/reducer/dragCardsReducer/draggingUserReducer\";\r\n\r\nimport {\r\n  combineUsers,\r\n  separateUsers,\r\n} from \"../../../../store/reducer/dragCardsReducer/userReducer\";\r\nimport {\r\n  getFlipThroughSelector,\r\n  getCurrentDraggingUserSelector,\r\n} from \"../../../../store/selectors/dragCardsSelectors\";\r\nimport {\r\n  startFlipThrough,\r\n  stopFlipThrough,\r\n} from \"../../../../store/reducer/dragCardsReducer/flipThroughReducer\";\r\nimport {\r\n  removeShine,\r\n  addShine,\r\n} from \"./utils/changeCardStyles\";\r\nimport \"./Card.scss\";\r\n\r\ninterface CardProps {\r\n  user: UserType;\r\n}\r\n\r\nexport const Card: FC<CardProps> = ({ user }) => {\r\n  const { currentDraggingUser } = useSelector(\r\n    getCurrentDraggingUserSelector\r\n  );\r\n  const { liningUser, idUser } = useSelector(\r\n    getFlipThroughSelector\r\n  );\r\n  const { name, gender, picture } =\r\n    liningUser && idUser === user.id ? liningUser : user;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //TODO: add it to reducer\r\n  let changeGenderColor = true; //it will be change by button\r\n  const cardGenderStylesHandle = (): string =>\r\n    changeGenderColor ? `card card__${gender}` : \"card\";\r\n\r\n  return (\r\n    <div className='wrap'>\r\n      <div\r\n        className={cardGenderStylesHandle()}\r\n        draggable={true}\r\n        onDragStart={() =>\r\n          dispatch(setCurrentDruggingUser(user))\r\n        }\r\n        onDragEnd={() =>\r\n          currentDraggingUser &&\r\n          dispatch(separateUsers(currentDraggingUser))\r\n        }\r\n        onDragLeave={(e) => removeShine(e)}\r\n        onDragOver={(e) => addShine(e)}\r\n        onDrop={(e) =>\r\n          dispatch(combineUsers(currentDraggingUser, user))\r\n        }\r\n      >\r\n        <img\r\n          onMouseOver={() =>\r\n            dispatch(startFlipThrough(user))\r\n          }\r\n          onMouseLeave={() => dispatch(stopFlipThrough())}\r\n          src={picture.large}\r\n          alt={`${name.last}`}\r\n          className='card__img'\r\n        />\r\n        <h4 className='card__title'>{`${name.first} ${name.last}`}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const removeShine = (e: React.DragEvent) => {\r\n  e.preventDefault();\r\n  e.currentTarget.classList.remove(\"card__shine\");\r\n};\r\nexport const addShine = (e: React.DragEvent) => {\r\n  e.preventDefault();\r\n  e.currentTarget.classList.add(\"card__shine\");\r\n};\r\n","import { FC } from \"react\";\r\n\r\nexport const CardDeck: FC<any> = ({ children, length }) => {\r\n  let wrapper = children;\r\n  while (length > 0) {\r\n    length--;\r\n    wrapper = (\r\n      <div\r\n        className='wrapperCard'\r\n        style={{ zIndex: `${length}` }}\r\n      >\r\n        {wrapper}\r\n      </div>\r\n    );\r\n  }\r\n  return <div className='CardDeckStyle'>{wrapper}</div>;\r\n};\r\n","import { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  fetchUsers,\r\n  fetchMan,\r\n  fetchWomen,\r\n} from \"../../../../store/reducer/dragCardsReducer/userReducer\";\r\n\r\nexport const NavBar: FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className='buttonsRow'>\r\n      <button\r\n        className='newUsersButton'\r\n        onClick={() => dispatch(fetchUsers())}\r\n      >\r\n        Get new users\r\n      </button>\r\n      <button\r\n        className='newUsersButton'\r\n        onClick={() => dispatch(fetchMan())}\r\n      >\r\n        Get only mans\r\n      </button>\r\n      <button\r\n        className='newUsersButton'\r\n        onClick={() => dispatch(fetchWomen(\"40\"))}\r\n      >\r\n        Get only women\r\n      </button>\r\n\r\n      {/* <button                 \r\n      className='newUsersButton'\r\n      onClick={() => dispatch(changeGenderColor())}  TODO: create new reducer\r\n    >\r\n     Add gender color\r\n    </button> */}\r\n    </div>\r\n  );\r\n};\r\n","import {FC} from 'react';\r\n\r\n export const DragCardsHeader: FC =()=>{\r\n\r\n  return (\r\n  <>\r\n  <h1 className='header'>Drag and drop.</h1>\r\n      <h2 className='header'>\r\n        Put in or pull out of the cards deck.\r\n      </h2>\r\n  </>\r\n)};\r\n","import React, { useEffect, FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport {\r\n  Card,\r\n  CardDeck,\r\n  NavBar,\r\n  // MyGoogleMap,\r\n} from \"./components\";\r\nimport { DragCardsHeader } from \"./ui\";\r\nimport \"./components/Card/Card.scss\";\r\n\r\nimport {\r\n  getUsersSelector,\r\n  //getErrorSelector,\r\n  // getLoaderSelector,\r\n} from \"../../store/selectors/dragCardsSelectors\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUsers } from \"../../store/reducer/dragCardsReducer/userReducer\";\r\n\r\nexport const DragCards: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const users = useSelector(getUsersSelector);\r\n\r\n  // const error = useSelector(getErrorSelector);\r\n  // const loader = useSelector(getLoaderSelector);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUsers());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Link to='/portfolio'>\r\n        <Button\r\n          variant={\"secondary\"}\r\n          style={{\r\n            boxShadow: \"10px 10px 10px rgb(100, 100, 100)\",\r\n          }}\r\n        >\r\n          Back\r\n        </Button>\r\n      </Link>\r\n      <DragCardsHeader />\r\n      <NavBar />\r\n      <div className='dragCards'>\r\n        {!!users?.length &&\r\n          users.map((user) => (\r\n            <CardDeck\r\n              length={user.another.length}\r\n              key={user.login.uuid + Math.random()}\r\n            >\r\n              <Card user={user} />\r\n            </CardDeck>\r\n          ))}\r\n      </div>\r\n      {/* <MyGoogleMap /> */}\r\n    </>\r\n  );\r\n};\r\n"],"names":["getUsersSelector","createSelector","state","dragCardsReducer","userReducer","u","getCurrentDraggingUserSelector","loadReducer","loader","l","error","e","druggingUserReducer","c","getFlipThroughSelector","flipThroughReducer","url","Card","user","currentDraggingUser","useSelector","liningUser","idUser","id","name","gender","picture","dispatch","useDispatch","className","draggable","onDragStart","setCurrentDruggingUser","onDragEnd","separateUsers","onDragLeave","preventDefault","currentTarget","classList","remove","removeShine","onDragOver","add","addShine","onDrop","combineUsers","onMouseOver","startFlipThrough","onMouseLeave","stopFlipThrough","src","large","alt","last","first","CardDeck","children","length","wrapper","style","zIndex","NavBar","onClick","fetchUsers","fetchMan","fetchWomen","DragCardsHeader","DragCards","users","useEffect","to","Button","variant","boxShadow","map","another","login","uuid","Math","random"],"sourceRoot":""}