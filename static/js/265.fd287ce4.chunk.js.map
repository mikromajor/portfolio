{"version":3,"file":"static/js/265.fd287ce4.chunk.js","mappings":"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","sources":["components/GalleriaFilms/api/getFetch.ts","components/GalleriaFilms/constants.ts","components/GalleriaFilms/api/getMovies.ts","components/GalleriaFilms/components/HeadMenu/handlers/handlerGenre.ts","components/GalleriaFilms/components/HeadMenu/HeadMenu.tsx","webpack://portfolio/./src/components/GalleriaFilms/components/FavoriteList/FavoriteList.module.css?c8ae","components/GalleriaFilms/components/FavoriteList/FavoriteList.tsx","webpack://portfolio/./src/components/GalleriaFilms/components/FilmsList/components/Film/Film.module.css?8404","components/GalleriaFilms/components/FilmsList/components/Film/Film.tsx","components/GalleriaFilms/components/FilmsList/hendlers/sorting.ts","webpack://portfolio/./src/components/GalleriaFilms/components/FilmsList/FilmsList.module.css?a12f","components/GalleriaFilms/components/FilmsList/FilmsList.tsx","components/GalleriaFilms/components/GalleriaFilms.tsx"],"sourcesContent":["async function getFetch(url: string) {\r\n  console.log(url);\r\n\r\n  if (!url) throw new Error(\"Wrong url in request\");\r\n\r\n  const response = await fetch(url);\r\n  if (response.status === 204) {\r\n    console.log(\"response.status === 204 (No content)\");\r\n    return;\r\n  }\r\n  if (!response.ok) {\r\n    throw new Error(\r\n      `Error. Response status  fetch is: ${response.status}`\r\n    );\r\n  } else {\r\n    return await response.json();\r\n  }\r\n}\r\nexport default getFetch;\r\n","export const API_URL = \"https://api.themoviedb.org/3\";\r\nexport const BASE_IMG_URL =\r\n  \"https://image.tmdb.org/t/p/w500\";\r\nexport const API_KEY = \"29b19dec74f080a60c50986cda85b141\";\r\nexport const PATH_3 =\r\n  \"&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=true&page=1\";\r\n\r\nexport type FILM = {\r\n  id: number;\r\n  [key: string]: string | number;\r\n};\r\nexport type ARR = FILM[];\r\n\r\nexport const SORT_INIT = {\r\n  original_title: false,\r\n  release_date: false,\r\n  vote_average: false,\r\n  vote_count: false,\r\n};\r\nexport type OPT = {\r\n  [key: string]: string;\r\n};\r\nexport const OPTIONS: OPT[] = [\r\n  { val: \"original_title\", name: \"Original title\" },\r\n  { val: \"release_date\", name: \"Release date\" },\r\n  { val: \"vote_average\", name: \"Vote average\" },\r\n  { val: \"vote_count\", name: \"Vote count\" },\r\n];\r\n","import getFetch from \"./getFetch\";\r\nimport {\r\n  API_URL,\r\n  API_KEY,\r\n  PATH_3,\r\n  ARR,\r\n} from \"../constants\";\r\n\r\nconst getMovies = (\r\n  genres: string[],\r\n  setFilmsData: React.Dispatch<React.SetStateAction<ARR>>,\r\n  setIsLoading: React.Dispatch<\r\n    React.SetStateAction<boolean>\r\n  >\r\n) => {\r\n  let url = \"\";\r\n  console.log(\"getMovies fire, genres are ->\", genres);\r\n\r\n  if (genres.length) {\r\n    url = `${API_URL}/discover/movie?api_key=${API_KEY}${PATH_3}&with_genres=${genres.join()}`;\r\n\r\n    setIsLoading(true);\r\n    getFetch(url)\r\n      .then((obj) => {\r\n        console.log(\"in getMovies--->\", obj.results);\r\n        setFilmsData(obj.results);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((e) => console.log(\"ups!!!\", e));\r\n  } else {\r\n    //print: 'please choose genre'\r\n    setFilmsData([]);\r\n  }\r\n};\r\n\r\nexport default getMovies;\r\n","const handlerGenre = (\r\n  genres: string[] | [],\r\n  setGenres: React.Dispatch<React.SetStateAction<string[]>>,\r\n  valGenre: string,\r\n  checked: boolean\r\n) => {\r\n  if (checked) {\r\n    if (!genres.length) setGenres([valGenre]);\r\n    if (!genres.some((genre) => genre === valGenre)) {\r\n      setGenres([...genres, valGenre]);\r\n    }\r\n  } else if (!checked) {\r\n    setGenres(genres.filter((genre) => genre !== valGenre));\r\n  }\r\n};\r\nexport default handlerGenre;\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  ToggleButton,\r\n  Navbar,\r\n  Nav,\r\n} from \"react-bootstrap\";\r\nimport {\r\n  DropdownGenre,\r\n  DropdownSort,\r\n  Counter,\r\n} from \"../UI\";\r\nimport { getMovies } from \"../../api\";\r\nimport { OPTIONS } from \"../../constants\";\r\nimport { handlerGenre } from \"./handlers\";\r\nimport { HeadMenuProps } from \"./HeadMenu.types\";\r\nimport \"./HeadMenu.css\";\r\n\r\nconst HeadMenu = ({\r\n  setFilmsData,\r\n  keyWordSort,\r\n  setKeyWordSort,\r\n  setShowFavoriteList,\r\n  showFavoriteList,\r\n  favoriteList,\r\n  setIsLoading,\r\n}: HeadMenuProps) => {\r\n  const [genres, setGenres] = useState<string[]>([]);\r\n\r\n  return (\r\n    <Navbar\r\n      variant='dark'\r\n      bg='dark'\r\n      expand='lg'\r\n      fixed='top'\r\n    >\r\n      <Navbar.Brand>FilmsTime</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls='navbar-dark-example' />\r\n      <Navbar.Collapse id='navbar-dark-example'>\r\n        <Nav>\r\n          <DropdownGenre\r\n            getGenre={(\r\n              valGenre: string,\r\n              checked: boolean\r\n            ) => {\r\n              handlerGenre(\r\n                genres,\r\n                setGenres,\r\n                valGenre,\r\n                checked\r\n              );\r\n            }}\r\n          />\r\n          <Button\r\n            variant={\"primary\"}\r\n            onClick={() =>\r\n              getMovies(genres, setFilmsData, setIsLoading)\r\n            }\r\n          >\r\n            Click to load\r\n          </Button>\r\n          <DropdownSort\r\n            options={OPTIONS}\r\n            defaultName={\"Sort\"}\r\n            value={keyWordSort}\r\n            setKeyWordSort={setKeyWordSort}\r\n          />\r\n          <ToggleButton\r\n            id='toggle-check'\r\n            type='checkbox'\r\n            variant='outline-success'\r\n            checked={showFavoriteList}\r\n            value=''\r\n            onChange={(e) =>\r\n              setShowFavoriteList(e.currentTarget.checked)\r\n            }\r\n          >\r\n            My favoriteList\r\n          </ToggleButton>\r\n          <Counter favoriteList={favoriteList} />\r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to='/portfolio'>BACK</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default HeadMenu;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"card_marg\":\"FavoriteList_card_marg__CKRnp\",\"no_films\":\"FavoriteList_no_films__bIXZO\",\"card_btn_delFilm\":\"FavoriteList_card_btn_delFilm__+MGQc\"};","import { Card, Row, Button } from \"react-bootstrap\";\r\nimport { ARR, FILM, BASE_IMG_URL } from \"../../constants\";\r\nimport c from \"./FavoriteList.module.css\";\r\n\r\nconst FavoriteList = ({\r\n  favoriteList,\r\n  setFavoriteList,\r\n}: {\r\n  favoriteList: ARR;\r\n  setFavoriteList: React.Dispatch<\r\n    React.SetStateAction<ARR>\r\n  >;\r\n}) => {\r\n  if (!favoriteList.length) {\r\n    return (\r\n      <div className={c.no_films}>\r\n        <h1>You haven't selected films.</h1>\r\n        <h4>Please ENTER My favoriteList to esc</h4>\r\n      </div>\r\n    );\r\n  }\r\n  const deleteFromList = (id: string) => {\r\n    setFavoriteList(\r\n      favoriteList.filter((f) => `${f.id}` !== id)\r\n    );\r\n  };\r\n  return (\r\n    <Row\r\n      id='home'\r\n      style={{\r\n        marginTop: \"20px\",\r\n        justifyContent: \"center\",\r\n        paddingTop: \"50px\",\r\n        backgroundColor: \"#F8FFAF\",\r\n      }}\r\n    >\r\n      {favoriteList.map((cardData: FILM) => (\r\n        <Card\r\n          style={{ width: \"20rem\" }}\r\n          bg={`success ${c.card_marg}`}\r\n          key={`MyList${cardData.id}`}\r\n        >\r\n          <Card.Img\r\n            variant='top'\r\n            src={`${BASE_IMG_URL}${cardData.poster_path}`}\r\n          />\r\n          <Card.Body>\r\n            <Card.Title>{cardData.title}</Card.Title>\r\n            <Card.Subtitle className='mb-2'>\r\n              Vote average {cardData.vote_average}\r\n            </Card.Subtitle>\r\n            <Card.Subtitle>\r\n              Counts {cardData.vote_count}\r\n            </Card.Subtitle>\r\n            <br />\r\n            <Card.Subtitle>\r\n              Release date {cardData.release_date}\r\n            </Card.Subtitle>\r\n            <br />\r\n            <Card.Text id={`cardText_${cardData.id}`}>\r\n              {cardData.overview}\r\n            </Card.Text>\r\n            <Button\r\n              className={c.card_btn_delFilm}\r\n              variant='danger'\r\n              value={cardData.id}\r\n              onClick={(e) => {\r\n                deleteFromList(e.currentTarget.value);\r\n              }}\r\n            >\r\n              Delete from favoriteList\r\n            </Button>\r\n          </Card.Body>\r\n        </Card>\r\n      ))}\r\n    </Row>\r\n  );\r\n};\r\nexport default FavoriteList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cardBody\":\"Film_cardBody__FUyl8\",\"filmCard\":\"Film_filmCard__eyQPa\",\"filmCard__expanded\":\"Film_filmCard__expanded__8ogW-\",\"cardButtonsRow\":\"Film_cardButtonsRow__WKxw9\",\"card_btn_remove\":\"Film_card_btn_remove__d1JdV\"};","import React, { useState } from \"react\";\r\nimport { Card, Button, CloseButton } from \"react-bootstrap\";\r\nimport { BASE_IMG_URL } from \"../../../../constants\";\r\nimport { FilmProps } from \"./Film.types\";\r\n\r\nimport styles from \"./Film.module.css\";\r\n\r\nconst Film = ({\r\n  film,\r\n  isInFavorites,\r\n  addToFavoriteList,\r\n  deleteFromFavoriteList,\r\n}: FilmProps) => {\r\n  const {\r\n    id,\r\n    title,\r\n    poster_path,\r\n    overview,\r\n    vote_count,\r\n    vote_average,\r\n    release_date,\r\n  } = film;\r\n\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  return (\r\n    <Card\r\n      style={{ width: \"20rem\" }}\r\n      bg={`${isInFavorites ? \"success\" : \"primary\"}`}\r\n      className={`${styles.filmCard} ${\r\n        isExpanded && styles.filmCard__expanded\r\n      }`}\r\n    >\r\n      <Card.Img\r\n        variant='top'\r\n        src={`${BASE_IMG_URL}${poster_path}`}\r\n      />\r\n      <Card.Body className={styles.cardBody}>\r\n        <Card.Title>{title}</Card.Title>\r\n        <Card.Subtitle className='mb-2'>\r\n          Vote average {vote_average}\r\n          <br />\r\n          Counts {vote_count}\r\n          <br />\r\n          Release date {release_date}\r\n          <br />\r\n        </Card.Subtitle>\r\n\r\n        {isExpanded && <Card.Text>{overview}</Card.Text>}\r\n\r\n        <div className={styles.cardButtonsRow}>\r\n          <Button\r\n            variant='dark'\r\n            onClick={() => {\r\n              setIsExpanded((prevState) => !prevState);\r\n            }}\r\n          >\r\n            {isExpanded ? \"Collapse\" : \"Expand\"}\r\n          </Button>\r\n\r\n          <Button\r\n            variant='success'\r\n            onClick={() => {\r\n              addToFavoriteList(id);\r\n            }}\r\n          >\r\n            Add to favorite\r\n          </Button>\r\n          {isInFavorites && (\r\n            <CloseButton\r\n              className={styles.card_btn_remove}\r\n              style={{ border: \"3px solid red\" }}\r\n              variant='white'\r\n              onClick={() => deleteFromFavoriteList(id)}\r\n            />\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Film;\r\n","//import { useCallback } from \"react\";\r\nimport { ARR } from \"../../../constants\";\r\n//import { useSortingProps } from \"./useSorting.types\";\r\n\r\nconst sorting = (\r\n  keyWordSort: string,\r\n  filmsList: ARR,\r\n  setFilmsList: React.Dispatch<React.SetStateAction<ARR>>\r\n) => {\r\n  if (\r\n    keyWordSort.length &&\r\n    filmsList.length &&\r\n    filmsList.every(\r\n      (obj) =>\r\n        typeof obj[keyWordSort] === \"string\" || \"number\"\r\n    )\r\n  ) {\r\n    setFilmsList(\r\n      [...filmsList].sort((a, b) => {\r\n        if (keyWordSort === \"original_title\") {\r\n          return a[keyWordSort] > b[keyWordSort] ? 1 : -1;\r\n        }\r\n        if (\r\n          keyWordSort === \"release_date\" ||\r\n          \"vote_average\" ||\r\n          \"vote_count\"\r\n        ) {\r\n          return a[keyWordSort] < b[keyWordSort] ? 1 : -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nexport default sorting;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"center\":\"FilmsList_center__olC8R\",\"hidden\":\"FilmsList_hidden__z2toT\"};","import { useCallback, useEffect } from \"react\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Film } from \"./components\";\r\nimport { FilmsListProps } from \"./FilmList.Types\";\r\nimport sorting from \"./hendlers/sorting\";\r\nimport cl from \"./FilmsList.module.css\";\r\nconst CardsFilms = ({\r\n  filmsData,\r\n  setFilmsData,\r\n  favoriteList,\r\n  setFavoriteList,\r\n  keyWordSort,\r\n  isLoading,\r\n}: FilmsListProps) => {\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      sorting(keyWordSort, filmsData, setFilmsData);\r\n      sorting(keyWordSort, favoriteList, setFavoriteList);\r\n    }\r\n  }, [keyWordSort, isLoading]);\r\n\r\n  const deleteFromFavoriteList = useCallback(\r\n    (id: number) => {\r\n      // option 1\r\n      // setFavoriteList( favoriteList.filter(\r\n      //   (o) => o.id !== id\r\n      // ));\r\n      // option 2\r\n      setFavoriteList((prevState) =>\r\n        prevState.filter((o) => o.id !== id)\r\n      );\r\n    },\r\n    [setFavoriteList]\r\n  );\r\n\r\n  const addToFavoriteList = useCallback(\r\n    (id: number) => {\r\n      const currentFilm = filmsData.filter(\r\n        (o) => o.id === id\r\n      );\r\n\r\n      if (!favoriteList.length) {\r\n        setFavoriteList(currentFilm);\r\n        //checking the same FILM\r\n      }\r\n      if (favoriteList.every((o) => o.id !== id)) {\r\n        setFavoriteList([...favoriteList, ...currentFilm]);\r\n      }\r\n    },\r\n    [filmsData, favoriteList, setFavoriteList]\r\n  );\r\n\r\n  return !filmsData.length ? (\r\n    <h3 className={cl.center}>Please, choose genres</h3>\r\n  ) : (\r\n    <Row\r\n      id='home'\r\n      style={{\r\n        justifyContent: \"center\",\r\n        marginTop: \"20px\",\r\n        paddingTop: \"50px\",\r\n        backgroundColor: \"#F8FFAF\",\r\n      }}\r\n    >\r\n      {filmsData.map((cardData) => {\r\n        const isInFavoritesArr = favoriteList.filter(\r\n          (film) => film.id === cardData.id\r\n        );\r\n        const isInFavorites = !!isInFavoritesArr.length;\r\n\r\n        return (\r\n          <Film\r\n            key={cardData.id}\r\n            film={cardData}\r\n            isInFavorites={isInFavorites}\r\n            deleteFromFavoriteList={deleteFromFavoriteList}\r\n            addToFavoriteList={addToFavoriteList}\r\n          />\r\n        );\r\n      })}\r\n    </Row>\r\n  );\r\n};\r\nexport default CardsFilms;\r\n","import { useState } from \"react\";\r\nimport { HeadMenu } from \"./HeadMenu\";\r\nimport FavoriteList from \"./FavoriteList/FavoriteList\";\r\nimport FilmsList from \"./FilmsList/FilmsList\";\r\nimport { ARR } from \"../constants\";\r\nimport { Loader } from \"./UI\";\r\n\r\nfunction GalleriaFilms() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [keyWordSort, setKeyWordSort] =\r\n    useState<string>(\"\");\r\n  const [filmsData, setFilmsData] = useState<ARR>([]);\r\n  const [favoriteList, setFavoriteList] = useState<ARR>([]);\r\n  const [showFavoriteList, setShowFavoriteList] =\r\n    useState(false);\r\n  console.log();\r\n\r\n  return (\r\n    <>\r\n      <HeadMenu\r\n        setFilmsData={setFilmsData}\r\n        setIsLoading={setIsLoading}\r\n        keyWordSort={keyWordSort}\r\n        setKeyWordSort={setKeyWordSort}\r\n        setShowFavoriteList={setShowFavoriteList}\r\n        showFavoriteList={showFavoriteList}\r\n        favoriteList={favoriteList} //set counter\r\n      />\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : showFavoriteList ? (\r\n        <FavoriteList\r\n          favoriteList={favoriteList}\r\n          setFavoriteList={setFavoriteList}\r\n        />\r\n      ) : (\r\n        <FilmsList\r\n          filmsData={filmsData}\r\n          setFilmsData={setFilmsData}\r\n          favoriteList={favoriteList}\r\n          setFavoriteList={setFavoriteList}\r\n          keyWordSort={keyWordSort}\r\n          isLoading={isLoading}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GalleriaFilms;\r\n"],"names":["getFetch","url","console","log","Error","fetch","response","status","ok","json","BASE_IMG_URL","OPTIONS","val","name","genres","setFilmsData","setIsLoading","length","join","then","obj","results","catch","e","setGenres","valGenre","checked","some","genre","filter","keyWordSort","setKeyWordSort","setShowFavoriteList","showFavoriteList","favoriteList","useState","Navbar","variant","bg","expand","fixed","id","Nav","getGenre","handlerGenre","Button","onClick","getMovies","options","defaultName","value","ToggleButton","type","onChange","currentTarget","to","setFavoriteList","className","c","Row","style","marginTop","justifyContent","paddingTop","backgroundColor","map","cardData","Card","width","src","poster_path","title","vote_average","vote_count","release_date","overview","f","film","isInFavorites","addToFavoriteList","deleteFromFavoriteList","isExpanded","setIsExpanded","styles","prevState","CloseButton","border","filmsList","setFilmsList","every","sort","a","b","filmsData","isLoading","useEffect","sorting","useCallback","o","currentFilm","cl","FilmsList"],"sourceRoot":""}